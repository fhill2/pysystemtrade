from pysystemtrade.sysinit.futures.seed_price_data_from_IB import seed_price_data_from_IB
from pathlib import Path
from pysystemtrade.sysdata.arctic.arctic_futures_per_contract_prices import arcticFuturesContractPriceData
from pathlib import Path
# from pysystemtrade.sysobjects.futures_per_contract_prices import futuresContractPrices
import pandas as pd
codes = [
"30YRCONF",
"30YRJUMBO",
"AEX",
"AEX_mini",
"ALUMINIUM",
"ALUMINIUM_LME",
"AMERIBOR-1M",
"AMERIBOR-3M",
"AMERIBOR-T30",
"AMX",
"ASX",
"ATX",
"AUD",
"AUD-ICE",
"AUD-SGX",
"AUDCAD",
"AUDJPY",
"AUDJPY-SGX",
"AUD_micro",
"AUSCASH",
"BARLEY",
"BB3M",
"BBCOMM",
"BEL20",
"BITCOIN",
"BITCOIN-BAKKT",
"BOBL",
"BONO",
"BONO-MEFF",
"BONO10",
"BONO3",
"BOVESPA",
"BRE",
"BRENT",
"BRENT-LAST",
"BRENT_W",
"BRR",
"BRREUR",
"BTP",
"BTP3",
"BTP5",
"BUND",
"BUTTER",
"BUXL",
"CAC",
"CAD",
"CAD10",
"CAD2",
"CAD5",
"CADJPY",
"CADJPY2",
"CADSTIR",
"CAD_micro",
"CAN-ENERGY",
"CAN-FINANCE",
"CAN-GOLD",
"CAN-TECH",
"CANOLA",
"CETES",
"CH10",
"CHEESE",
"CHF",
"CHFJPY",
"CHFJPY-ICE",
"CHF_micro",
"CHINA120",
"CHINAA-CON",
"CLP",
"CNH",
"CNH-CME",
"CNH-CME_micro",
"CNH-HK",
"CNH-onshore",
"CNHEUR",
"COAL",
"COAL-GEORDIE",
"COAL-RICH-BAY",
"COCOA",
"COCOA_LDN",
"COFFEE",
"COPPER",
"COPPER-micro",
"COPPER-mini",
"COPPER_LME",
"CORN",
"CORN-EURO",
"CORN-JPN",
"CORN_mini",
"CORRA",
"COTTON",
"COTTON2",
"CRUDE_ICE",
"CRUDE_W",
"CRUDE_W_micro",
"CRUDE_W_mini",
"CZK",
"DAX",
"DIVDAX",
"DIVDAX-DIVI",
"DIVDAX-DIVI2",
"DJSTX-SMALL",
"DJUBS",
"DOW",
"DOW_YEN",
"DOW_mini",
"DX",
"EDOLLAR",
"EPRA-EURO",
"EPRA-EUROPE",
"ETHANOL",
"ETHER-micro",
"ETHEREUM",
"ETHRR",
"ETHRREUR",
"EU-AUTO",
"EU-BANKS",
"EU-BANKS-DIVI",
"EU-BANKS2",
"EU-BASIC",
"EU-CHEM",
"EU-CONSTRUCTION",
"EU-DIV30",
"EU-DIV30-DVP",
"EU-DIV50",
"EU-DJ-AUTO",
"EU-DJ-BASIC",
"EU-DJ-CHEM",
"EU-DJ-CONSTRUCTION",
"EU-DJ-FINANCE",
"EU-DJ-FOOD",
"EU-DJ-HEALTH",
"EU-DJ-HOUSE",
"EU-DJ-INDUSTRY",
"EU-DJ-INDUSTRY2",
"EU-DJ-INSURE",
"EU-DJ-MEDIA",
"EU-DJ-OIL",
"EU-DJ-RETAIL",
"EU-DJ-TECH",
"EU-DJ-TELECOM",
"EU-DJ-TRAVEL",
"EU-DJ-UTIL",
"EU-ESG",
"EU-FINANCE",
"EU-FOOD",
"EU-HEALTH",
"EU-HOUSE",
"EU-INSURE",
"EU-MEDIA",
"EU-MID",
"EU-OIL",
"EU-REALESTATE",
"EU-RETAIL",
"EU-TECH",
"EU-TELECOM",
"EU-TRAVEL",
"EU-UTILS",
"EUA",
"EUIRS10",
"EUIRS2",
"EUIRS5",
"EUR",
"EUR-ICE",
"EURAUD",
"EURAUD-ICE",
"EURCAD",
"EURCAD-ICE",
"EURCHF",
"EURCHF-ICE",
"EURCZK",
"EURHUF",
"EURIBOR",
"EURIBOR-ICE",
"EURINR",
"EURMXP",
"EURO600",
"EURO600-ESG",
"EUROFIRST100",
"EUROFIRST80",
"EUROSTX",
"EUROSTX-CORE",
"EUROSTX-DJ",
"EUROSTX-LARGE",
"EUROSTX-MID",
"EUROSTX-PRICE",
"EUROSTX-SMALL",
"EUROSTX200-LARGE",
"EUR_micro",
"EUR_mini",
"FANG",
"FED",
"FEEDCOW",
"FTSE100",
"FTSE100-DIV",
"FTSE250",
"FTSECHINAA",
"FTSECHINAA-CSOP",
"FTSECHINAA-IS",
"FTSECHINAH",
"FTSEINDO",
"FTSETAIWAN",
"FTSEVIET",
"GAS-LAST",
"GAS-PEN",
"GASOIL",
"GASOILINE",
"GASOILINE_ICE",
"GASOILINE_micro",
"GAS_NL",
"GAS_UK",
"GAS_US",
"GAS_US_mini",
"GBP",
"GBP-ICE",
"GBPCHF",
"GBPCHF-ICE",
"GBPEUR",
"GBPEUR-ICE",
"GBPINR",
"GBPJPY",
"GBPJPY-ICE",
"GBP_micro",
"GICS",
"GICS-EXCESS",
"GILT",
"GILT2",
"GILT5",
"GOLD",
"GOLD-CHINA",
"GOLD-CHINA-USD",
"GOLD-CN-HK",
"GOLD-HK",
"GOLD-JPN",
"GOLD-JPN_mini",
"GOLD-mini",
"GOLD_micro",
"HANG",
"HANG-DIV",
"HANGTECH",
"HANGENT",
"HANGENT-GTR",
"HANGENT-NTR",
"HANGENT_mini",
"HANG_mini",
"HEAT-DEG-AMS",
"HEAT-DEG-LON",
"HEAT-DEG-NY",
"HEATOIL",
"HEATOIL-ICE",
"HEATOIL-mini",
"HEATOIL_micro",
"HIBOR",
"HIGHYIELD",
"HOUSE-BO",
"HOUSE-CG",
"HOUSE-DC",
"HOUSE-DN",
"HOUSE-LA",
"HOUSE-LV",
"HOUSE-MI",
"HOUSE-NY",
"HOUSE-SD",
"HOUSE-SF",
"HOUSE-US",
"HSCEI-DIV",
"HUF",
"HUFEUR",
"IBEX",
"IBEX_mini",
"IG",
"IND-BANK",
"IND-FIN",
"INR",
"INR-SGX",
"INR-SGX1",
"INR-SGX2",
"INR-micro",
"IPC",
"IRON",
"IRON-CME",
"IRON-HK",
"IRS",
"JGB",
"JGB-SGX-mini",
"JGB-mini",
"JP-REALESTATE",
"JPY",
"JPY-SGX",
"JPY-SGX-TITAN",
"JPYINR",
"JPY_micro",
"JPY_mini",
"KOSDAQ",
"KOSPI",
"KOSPI300",
"KOSPI_mini",
"KR10",
"KR3",
"KRW",
"KRWJPY",
"KRWUSD",
"KRWUSD_mini",
"LEAD_LME",
"LEANHOG",
"LIBOR1",
"LIVECOW",
"LUMBER",
"LUMBER-new",
"MARS-ARGUS",
"MIB",
"MIB-DIVI",
"MIB_micro",
"MIB_mini",
"MID-DAX",
"MILK",
"MILKDRY",
"MILKWET",
"MILLWHEAT",
"MSCIASIA",
"MSCIBRAZIL",
"MSCIEAFA",
"MSCIEM",
"MSCIEM-LIFFE",
"MSCIEMASIA",
"MSCIEURONET",
"MSCIEURONET-ICE",
"MSCIEUROPE",
"MSCIEUROPE-ICE",
"MSCIEUROPE-LIFFE",
"MSCIINDO",
"MSCIJAPAN",
"MSCIJAPAN-LIFFE",
"MSCILATIN",
"MSCIPANEURO-LIFFE",
"MSCISING",
"MSCITAIWAN",
"MSCIUSA",
"MSCIWORLD",
"MSCIWORLD-MINVOL",
"MSCIWORLDNET-EUR",
"MSCIWORLDNET-USD",
"MUMMY",
"MXP",
"NASDAQ",
"NASDAQ_micro",
"NASDAQ_mini",
"NICKEL_LME",
"NIFTY",
"NIFTY-IN",
"NIKKEI",
"NIKKEI-CME",
"NIKKEI-JPY",
"NIKKEI-JPY_mini",
"NIKKEI-SGX",
"NIKKEI-SGX-DIV",
"NIKKEI-SGX-USD",
"NIKKEI-SGX_mini",
"NIKKEI400",
"NIKKEI_large",
"NOK",
"NZD",
"OAT",
"OAT5",
"OATIES",
"OJ",
"OMX",
"OMX-SWE",
"OMXESG",
"OMXSB",
"PALLAD",
"PIPELINE",
"PLAT",
"PLAT-JPN",
"PLAT-JPN_mini",
"PLN",
"PLZEUR",
"R1000",
"R1000GROWTH-mini",
"R1000_mini",
"RAPESEED",
"REDWHEAT",
"RICE",
"ROBUSTA",
"RUBBER",
"RUBBER-RSS",
"RUR",
"RUSSELL",
"RUSSELL-GROWTH",
"RUSSELL-VALUE",
"RUSSELL_mini",
"SARONA",
"SEK",
"SGD",
"SGD_mini",
"SGX",
"SHATZ",
"SILVER",
"SILVER-mini",
"SING-REALESTATE",
"SMI",
"SMI-DIV",
"SMI-MID",
"SMIETF",
"SOFR",
"SOFR1",
"SONIA",
"SONIA1",
"SONIA3",
"SOYBEAN",
"SOYBEAN_mini",
"SOYMEAL",
"SOYOIL",
"SP400",
"SP500",
"SP500-GROWTH",
"SP500-VALUE",
"SP500_micro",
"SP500_mini",
"SP600-SMALL",
"SPI200",
"STEEL",
"STERLING3",
"SUGAR11",
"SUGAR16",
"SUGAR_WHITE",
"SWISSLEAD",
"TECDAX",
"THB",
"TIN_LME",
"TOPIX",
"TOPIX30",
"TOPIX_Large",
"TSE60",
"TSX",
"TWD",
"TWD-mini",
"UMBS-20",
"UMBS-25",
"UMBS-30",
"UMBS-35",
"UMBS-40",
"UMBS-45",
"UMBS-50",
"URANIUM",
"US-BIOTECH",
"US-DISCRETE",
"US-ENERGY",
"US-FINANCE",
"US-HEALTH",
"US-INDUSTRY",
"US-INSURE",
"US-MATERIAL",
"US-OILGAS",
"US-PROPERTY",
"US-REALESTATE",
"US-REGBANK",
"US-RETAIL",
"US-SEMICONDUCTOR",
"US-STAPLES",
"US-TECH",
"US-UTILS",
"US10",
"US10U",
"US10Y_micro",
"US10Y_small",
"US2",
"US20",
"US20-new",
"US2Y_micro",
"US2Y_small",
"US3",
"US30",
"US30Y_micro",
"US30Y_small",
"US5",
"US5Y_micro",
"USDCAD_micro",
"USDCHF_micro",
"USDCNH-CME",
"USDCNH-HK",
"USDCNH-SGX_mini",
"USDINR",
"USDKRW",
"USDMXP",
"USIRS10",
"USIRS10ERIS",
"USIRS12ERIS",
"USIRS15ERIS",
"USIRS2",
"USIRS20ERIS",
"USIRS2ERIS",
"USIRS30",
"USIRS3ERIS",
"USIRS4ERIS",
"USIRS5",
"USIRS5ERIS",
"USIRS5ERIS_SOFR",
"USIRS7ERIS",
"V2X",
"VHANG",
"VIX",
"VIX_mini",
"VNKI",
"VOLQ",
"WATER-CALI",
"WHEAT",
"WHEAT-ASX",
"WHEAT_ICE",
"WHEAT_mini",
"WHEY",
"YENEUR",
"YENEUR-ICE",
"ZAR",
"ZINC_LME",
]
roll_config_csv = "/Users/g1/BU/projects/pysystemtrade/data/futures/csvconfig/rollconfig.csv"
roll_config = pd.read_csv(roll_config_csv) \
                .set_index("Instrument") \
                .loc["30YRCONF"] \
                .to_dict()
                

# codes = list(pd.read_csv(roll_config_csv).Instrument)
# for code in codes:
#     print(f'"{code}",')

def seed_all_price_data_from_IB():
    error = []
    for code in codes:
        try:
            seed_price_data_from_IB(code)
        except Exception as e:
            error.append(error)
    print(f"Error with {error}")


def get_prices(code: str):
    from syscore.dateutils import Frequency
    def _write_prices(frequency, prices):
        output_root = Path('~/Desktop/ib_data_download/').expanduser()
        for expiry_date, df in prices.items():
            output_path = output_root / f"{code}/{frequency}/{expiry_date}.parquet"
            output_path.parent.mkdir(parents=True, exist_ok=True)
            print(f"Writing File - {output_path}")
            print(df)
            df.to_parquet(output_path)
    prices = arcticFuturesContractPriceData()
    daily_prices = prices.get_prices_at_frequency_for_instrument(code, Frequency.Day)
    hourly_prices = prices.get_prices_at_frequency_for_instrument(code, Frequency.Hour)
    _write_prices("DAY", daily_prices)
    _write_prices("HOUR", hourly_prices)
# get_prices("BRE")
# seed_price_data_from_IB("BRE")
# seed_price_data_from_IB("CRUDE_W")
# seed_price_data_from_IB("SOYOIL")
# seed_price_data_from_IB("US10")
# seed_price_data_from_IB("V2X")
# seed_price_data_from_IB("VIX")
# exit()

def build_and_write_roll_calendar(code: str):
    from pysystemtrade.sysinit.futures.rollcalendars_from_arcticprices_to_csv import build_and_write_roll_calendar
    expected = build_and_write_roll_calendar(
                code,
                output_datapath="/Users/g1/Desktop/roll-calendars",
    )
    
def export_roll_calendar_data(instrument_code: str, folder: Path):
    from sysdata.csv.csv_roll_parameters import csvRollParametersData
    from sysinit.futures.build_roll_calendars import generate_approximate_calendar
    from sysinit.futures.build_roll_calendars import adjust_to_price_series
    
    folder = Path(folder)
    folder.mkdir(parents=True, exist_ok=True)
    
    prices = arcticFuturesContractPriceData()
    dict_of_all_futures_contract_prices = prices.get_merged_prices_for_instrument(
        instrument_code
    )
    dict_of_futures_contract_prices = dict_of_all_futures_contract_prices.final_prices()
    
    for expiry_date, df in dict_of_futures_contract_prices.items():
        out = folder / f"merged/{expiry_date}.parquet"
        out.parent.mkdir(parents=True, exist_ok=True)
        df.to_csv(out)
        
    roll_parameters_data = csvRollParametersData()
    roll_parameters = roll_parameters_data.get_roll_parameters(instrument_code)
    approx_calendar = generate_approximate_calendar(
        roll_parameters, dict_of_futures_contract_prices
    )
    approx_calendar.to_csv(folder / "approx_calendar.csv")
    
    adjusted_calendar = adjust_to_price_series(
        approx_calendar, dict_of_futures_contract_prices
    )
    adjusted_calendar.to_csv(folder / "adjusted_calendar.csv")
    
    
export_roll_calendar_data(
    instrument_code="BRE",
    folder="/Users/g1/BU/projects/pytower_develop/pytower/tests/data/roll/BRE",
)
exit()


# seed_all_price_data_from_IB()
print(expected)
exit()
# def export_merged_data(instrument_code: str):
#     folder = Path("/Users/g1/Desktop/ib_data_download")
#     prices = arcticFuturesContractPriceData()
#     dict_of_all_futures_contract_prices = prices.get_merged_prices_for_instrument(
#         instrument_code
#     )
#     for expiry, df in dict_of_all_futures_contract_prices.items():
#         if df.empty:
#             continue
#         df.to_parquet(folder / f"{expiry}.parquet", engine="pyarrow")
            
folder = Path("/Users/g1/Desktop/ib_data_download")
prices = {path.stem:pd.read_parquet(path) for path in sorted(list(folder.rglob("*.parquet")))}



                
roll_calendar = _build_and_write_roll_calendar(
    roll_config=roll_config,
    prices=prices,
)